KNN_accuracy = c(0.6012),               # KNN 精度
RF_accuracy = c(0.8937)                 # Random Forest 精度
)
write.csv(data5, "output.csv", row.names = FALSE)
# 创建数据框
data6 <- data.frame(
topic = c(2000),                     # 主题列
DA_accuracy = c(0.9659),                # Discriminant Analysis 精度
KNN_accuracy = c(0.6366),               # KNN 精度
RF_accuracy = c(0.9834)                 # Random Forest 精度
)
write.csv(data6, "output.csv", row.names = FALSE)
Final_Result <- rbind(data1,data2,data3,data4,data5,data6)
colnames(Final_Result) <- c("Dataset", "DA", "KNN", "RF")
Final_Result$Dataset <- factor(Final_Result$Dataset)
Result_long <- pivot_longer(Final_Result,
cols = colnames(Final_Result)[-1],
names_to = "Model",
values_to = "Accuracy")
Baseline_long <- Result_long[1:3, ]
Result_long <- Result_long[-c(1, 2, 3), ]
fig <- ggplot(Result_long, aes(x = Dataset, y = Accuracy, color = Model, group = Model)) +
geom_line(linewidth = 1.5) +                # Plot the lines connecting the points for each model
geom_point(size = 4) +               # Add points to show the accuracy values
labs(x = "Number of Words",  # X-axis label
y = "Accuracy") +  # Y-axis label
scale_color_brewer(palette = "Set2") +
geom_hline(data = Baseline_long,
aes(yintercept = Accuracy, color = Model),
linetype = "dashed", linewidth = 1) +# Add horizontal dashed lines for Baseline
theme_bw() +
theme(
text = element_text(size = 14),  # Set global font size
axis.title = element_text(size = 16),  # Adjust axis title font size
axis.text = element_text(size = 12),  # Adjust axis tick labels font size
legend.title = element_text(size = 14),  # Adjust legend title font size
legend.text = element_text(size = 12),  # Adjust legend text font size
plot.title = element_text(size = 18)  # Adjust plot title font size
)
# ggsave("./SEM1/Project2/Figures/Task1 ReduceWords Lineplot.pdf", width = 8, height = 6)
fig
library(ggplot2)
library(tidyr)
# 创建数据框
data1 <- data.frame(
topic = c("Baseline"),                     # 主题列
DA_accuracy = c(0.9669),                # Discriminant Analysis 精度
KNN_accuracy = c(0.658),               # KNN 精度
RF_accuracy = c(0.9995)                 # Random Forest 精度
)
write.csv(data1, "output.csv", row.names = FALSE)
# 创建数据框
data2 <- data.frame(
topic = c(50),                     # 主题列
DA_accuracy = c(0.8216),                # Discriminant Analysis 精度
KNN_accuracy = c(0.5211),               # KNN 精度
RF_accuracy = c(0.4999)                 # Random Forest 精度
)
write.csv(data2, "output.csv", row.names = FALSE)
# 创建数据框
data3 <- data.frame(
topic = c(200),                     # 主题列
DA_accuracy = c(0.9261),                # Discriminant Analysis 精度
KNN_accuracy = c(0.5823),               # KNN 精度
RF_accuracy = c(0.5084)                 # Random Forest 精度
)
write.csv(data3, "output.csv", row.names = FALSE)
# 创建数据框
data4 <- data.frame(
topic = c(500),                     # 主题列
DA_accuracy = c(0.957),                # Discriminant Analysis 精度
KNN_accuracy = c(0.6),               # KNN 精度
RF_accuracy = c(0.702)                 # Random Forest 精度
)
write.csv(data4, "output.csv", row.names = FALSE)
# 创建数据框
data5 <- data.frame(
topic = c(1000),                     # 主题列
DA_accuracy = c(0.9646),                # Discriminant Analysis 精度
KNN_accuracy = c(0.6012),               # KNN 精度
RF_accuracy = c(0.8937)                 # Random Forest 精度
)
write.csv(data5, "output.csv", row.names = FALSE)
# 创建数据框
data6 <- data.frame(
topic = c(2000),                     # 主题列
DA_accuracy = c(0.9659),                # Discriminant Analysis 精度
KNN_accuracy = c(0.6366),               # KNN 精度
RF_accuracy = c(0.9834)                 # Random Forest 精度
)
write.csv(data6, "output.csv", row.names = FALSE)
Final_Result <- rbind(data1,data2,data3,data4,data5,data6)
colnames(Final_Result) <- c("Dataset", "DA", "KNN", "RF")
Final_Result$Dataset <- factor(Final_Result$Dataset)
Result_long <- pivot_longer(Final_Result,
cols = colnames(Final_Result)[-1],
names_to = "Model",
values_to = "Accuracy")
Baseline_long <- Result_long[1:3, ]
Result_long <- Result_long[-c(1, 2, 3), ]
fig <- ggplot(Result_long, aes(x = Dataset, y = Accuracy, color = Model, group = Model)) +
geom_line(linewidth = 1.5) +                # Plot the lines connecting the points for each model
geom_point(size = 4) +               # Add points to show the accuracy values
labs(x = "Number of Words",  # X-axis label
y = "Accuracy") +  # Y-axis label
scale_color_brewer(palette = "Set2") +
geom_hline(data = Baseline_long,
aes(yintercept = Accuracy, color = Model),
linetype = "dashed", linewidth = 1) +# Add horizontal dashed lines for Baseline
theme_bw() +
theme(
text = element_text(size = 14),  # Set global font size
axis.title = element_text(size = 16),  # Adjust axis title font size
axis.text = element_text(size = 12),  # Adjust axis tick labels font size
legend.title = element_text(size = 14),  # Adjust legend title font size
legend.text = element_text(size = 12),  # Adjust legend text font size
plot.title = element_text(size = 18)  # Adjust plot title font size
)
ggsave("./SEM1/Project2/Figures/Task1 ReduceWords Lineplot.pdf", width = 8, height = 6)
library(ggplot2)
library(tidyr)
# 创建数据框
data1 <- data.frame(
topic = c("Baseline"),                     # 主题列
DA_accuracy = c(0.9669),                # Discriminant Analysis 精度
KNN_accuracy = c(0.658),               # KNN 精度
RF_accuracy = c(0.9995)                 # Random Forest 精度
)
write.csv(data1, "output.csv", row.names = FALSE)
# 创建数据框
data2 <- data.frame(
topic = c(50),                     # 主题列
DA_accuracy = c(0.8216),                # Discriminant Analysis 精度
KNN_accuracy = c(0.5211),               # KNN 精度
RF_accuracy = c(0.4999)                 # Random Forest 精度
)
write.csv(data2, "output.csv", row.names = FALSE)
# 创建数据框
data3 <- data.frame(
topic = c(200),                     # 主题列
DA_accuracy = c(0.9261),                # Discriminant Analysis 精度
KNN_accuracy = c(0.5823),               # KNN 精度
RF_accuracy = c(0.5084)                 # Random Forest 精度
)
write.csv(data3, "output.csv", row.names = FALSE)
# 创建数据框
data4 <- data.frame(
topic = c(500),                     # 主题列
DA_accuracy = c(0.957),                # Discriminant Analysis 精度
KNN_accuracy = c(0.6),               # KNN 精度
RF_accuracy = c(0.702)                 # Random Forest 精度
)
write.csv(data4, "output.csv", row.names = FALSE)
# 创建数据框
data5 <- data.frame(
topic = c(1000),                     # 主题列
DA_accuracy = c(0.9646),                # Discriminant Analysis 精度
KNN_accuracy = c(0.6012),               # KNN 精度
RF_accuracy = c(0.8937)                 # Random Forest 精度
)
write.csv(data5, "output.csv", row.names = FALSE)
# 创建数据框
data6 <- data.frame(
topic = c(2000),                     # 主题列
DA_accuracy = c(0.9659),                # Discriminant Analysis 精度
KNN_accuracy = c(0.6366),               # KNN 精度
RF_accuracy = c(0.9834)                 # Random Forest 精度
)
write.csv(data6, "output.csv", row.names = FALSE)
Final_Result <- rbind(data1,data2,data3,data4,data5,data6)
colnames(Final_Result) <- c("Dataset", "DA", "KNN", "RF")
Final_Result$Dataset <- factor(Final_Result$Dataset, levels = c("Baseline", "50", "200", "500", "1000", "2000"))
Result_long <- pivot_longer(Final_Result,
cols = colnames(Final_Result)[-1],
names_to = "Model",
values_to = "Accuracy")
Baseline_long <- Result_long[1:3, ]
Result_long <- Result_long[-c(1, 2, 3), ]
fig <- ggplot(Result_long, aes(x = Dataset, y = Accuracy, color = Model, group = Model)) +
geom_line(linewidth = 1.5) +                # Plot the lines connecting the points for each model
geom_point(size = 4) +               # Add points to show the accuracy values
labs(x = "Number of Words",  # X-axis label
y = "Accuracy") +  # Y-axis label
scale_color_brewer(palette = "Set2") +
geom_hline(data = Baseline_long,
aes(yintercept = Accuracy, color = Model),
linetype = "dashed", linewidth = 1) +# Add horizontal dashed lines for Baseline
theme_bw() +
theme(
text = element_text(size = 14),  # Set global font size
axis.title = element_text(size = 16),  # Adjust axis title font size
axis.text = element_text(size = 12),  # Adjust axis tick labels font size
legend.title = element_text(size = 14),  # Adjust legend title font size
legend.text = element_text(size = 12),  # Adjust legend text font size
plot.title = element_text(size = 18)  # Adjust plot title font size
)
ggsave("./SEM1/Project2/Figures/Task1 ReduceWords Lineplot.pdf", width = 8, height = 6)
library(ggplot2)
library(tidyr)
# 创建数据框
data1 <- data.frame(
topic = c("Baseline"),                     # 主题列
DA_accuracy = c(0.9669),                # Discriminant Analysis 精度
KNN_accuracy = c(0.658),               # KNN 精度
RF_accuracy = c(0.9995)                 # Random Forest 精度
)
write.csv(data1, "output.csv", row.names = FALSE)
# 创建数据框
data2 <- data.frame(
topic = c(50),                     # 主题列
DA_accuracy = c(0.8216),                # Discriminant Analysis 精度
KNN_accuracy = c(0.5211),               # KNN 精度
RF_accuracy = c(0.4999)                 # Random Forest 精度
)
write.csv(data2, "output.csv", row.names = FALSE)
# 创建数据框
data3 <- data.frame(
topic = c(200),                     # 主题列
DA_accuracy = c(0.9261),                # Discriminant Analysis 精度
KNN_accuracy = c(0.5823),               # KNN 精度
RF_accuracy = c(0.5084)                 # Random Forest 精度
)
write.csv(data3, "output.csv", row.names = FALSE)
# 创建数据框
data4 <- data.frame(
topic = c(500),                     # 主题列
DA_accuracy = c(0.957),                # Discriminant Analysis 精度
KNN_accuracy = c(0.6),               # KNN 精度
RF_accuracy = c(0.702)                 # Random Forest 精度
)
write.csv(data4, "output.csv", row.names = FALSE)
# 创建数据框
data5 <- data.frame(
topic = c(1000),                     # 主题列
DA_accuracy = c(0.9646),                # Discriminant Analysis 精度
KNN_accuracy = c(0.6012),               # KNN 精度
RF_accuracy = c(0.8937)                 # Random Forest 精度
)
write.csv(data5, "output.csv", row.names = FALSE)
# 创建数据框
data6 <- data.frame(
topic = c(2000),                     # 主题列
DA_accuracy = c(0.9659),                # Discriminant Analysis 精度
KNN_accuracy = c(0.6366),               # KNN 精度
RF_accuracy = c(0.9834)                 # Random Forest 精度
)
write.csv(data6, "output.csv", row.names = FALSE)
Final_Result <- rbind(data1,data2,data3,data4,data5,data6)
colnames(Final_Result) <- c("Dataset", "DA", "KNN", "RF")
Final_Result$Dataset <- factor(Final_Result$Dataset, levels = c("Baseline", "50", "200", "500", "1000", "2000"))
Result_long <- pivot_longer(Final_Result,
cols = colnames(Final_Result)[-1],
names_to = "Model",
values_to = "Accuracy")
Baseline_long <- Result_long[1:3, ]
Result_long <- Result_long[-c(1, 2, 3), ]
fig <- ggplot(Result_long, aes(x = Dataset, y = Accuracy, color = Model, group = Model)) +
geom_line(linewidth = 1.5) +                # Plot the lines connecting the points for each model
geom_point(size = 4) +               # Add points to show the accuracy values
labs(x = "Number of Words",  # X-axis label
y = "Accuracy") +  # Y-axis label
scale_color_brewer(palette = "Set2") +
geom_hline(data = Baseline_long,
aes(yintercept = Accuracy, color = Model),
linetype = "dashed", linewidth = 1) +# Add horizontal dashed lines for Baseline
theme_bw() +
theme(
text = element_text(size = 14),  # Set global font size
axis.title = element_text(size = 16),  # Adjust axis title font size
axis.text = element_text(size = 12),  # Adjust axis tick labels font size
legend.title = element_text(size = 14),  # Adjust legend title font size
legend.text = element_text(size = 12),  # Adjust legend text font size
plot.title = element_text(size = 18)  # Adjust plot title font size
)
ggsave("./SEM1/Project2/Figures/Task1 ReduceWords Lineplot.pdf", width = 8, height = 6)
library(ggplot2)
library(tidyr)
# 创建数据框
data1 <- data.frame(
topic = c("Baseline"),                     # 主题列
DA_accuracy = c(0.9669),                # Discriminant Analysis 精度
KNN_accuracy = c(0.658),               # KNN 精度
RF_accuracy = c(0.9995)                 # Random Forest 精度
)
write.csv(data1, "output.csv", row.names = FALSE)
# 创建数据框
data2 <- data.frame(
topic = c(50),                     # 主题列
DA_accuracy = c(0.8216),                # Discriminant Analysis 精度
KNN_accuracy = c(0.5211),               # KNN 精度
RF_accuracy = c(0.4999)                 # Random Forest 精度
)
write.csv(data2, "output.csv", row.names = FALSE)
# 创建数据框
data3 <- data.frame(
topic = c(200),                     # 主题列
DA_accuracy = c(0.9261),                # Discriminant Analysis 精度
KNN_accuracy = c(0.5823),               # KNN 精度
RF_accuracy = c(0.5084)                 # Random Forest 精度
)
write.csv(data3, "output.csv", row.names = FALSE)
# 创建数据框
data4 <- data.frame(
topic = c(500),                     # 主题列
DA_accuracy = c(0.957),                # Discriminant Analysis 精度
KNN_accuracy = c(0.6),               # KNN 精度
RF_accuracy = c(0.702)                 # Random Forest 精度
)
write.csv(data4, "output.csv", row.names = FALSE)
# 创建数据框
data5 <- data.frame(
topic = c(1000),                     # 主题列
DA_accuracy = c(0.9646),                # Discriminant Analysis 精度
KNN_accuracy = c(0.6012),               # KNN 精度
RF_accuracy = c(0.8937)                 # Random Forest 精度
)
write.csv(data5, "output.csv", row.names = FALSE)
# 创建数据框
data6 <- data.frame(
topic = c(2000),                     # 主题列
DA_accuracy = c(0.9659),                # Discriminant Analysis 精度
KNN_accuracy = c(0.6366),               # KNN 精度
RF_accuracy = c(0.9834)                 # Random Forest 精度
)
write.csv(data6, "output.csv", row.names = FALSE)
Final_Result <- rbind(data1,data2,data3,data4,data5,data6)
colnames(Final_Result) <- c("Dataset", "DA", "KNN", "RF")
Final_Result$Dataset <- factor(Final_Result$Dataset, levels = c("Baseline", "2000", "1000", "500", "200", "50"))
Result_long <- pivot_longer(Final_Result,
cols = colnames(Final_Result)[-1],
names_to = "Model",
values_to = "Accuracy")
Baseline_long <- Result_long[1:3, ]
Result_long <- Result_long[-c(1, 2, 3), ]
fig <- ggplot(Result_long, aes(x = Dataset, y = Accuracy, color = Model, group = Model)) +
geom_line(linewidth = 1.5) +                # Plot the lines connecting the points for each model
geom_point(size = 4) +               # Add points to show the accuracy values
labs(x = "Number of Words",  # X-axis label
y = "Accuracy") +  # Y-axis label
scale_color_brewer(palette = "Set2") +
geom_hline(data = Baseline_long,
aes(yintercept = Accuracy, color = Model),
linetype = "dashed", linewidth = 1) +# Add horizontal dashed lines for Baseline
theme_bw() +
theme(
text = element_text(size = 14),  # Set global font size
axis.title = element_text(size = 16),  # Adjust axis title font size
axis.text = element_text(size = 12),  # Adjust axis tick labels font size
legend.title = element_text(size = 14),  # Adjust legend title font size
legend.text = element_text(size = 12),  # Adjust legend text font size
plot.title = element_text(size = 18)  # Adjust plot title font size
)
ggsave("./SEM1/Project2/Figures/Task1 ReduceWords Lineplot.pdf", width = 8, height = 6)
source("SEM1/Project2/stylometryfunctions.R")
humanM <- loadCorpus("SEM1/Project2/functionwords/functionwords/humanfunctionwords/", "functionwords")
GPTM <- loadCorpus("SEM1/Project2/functionwords/functionwords/GPTfunctionwords/", "functionwords")
# 1.2 features
humanfeatures <- humanM$features
GPTfeatures <- GPTM$features
features <- c(humanfeatures,GPTfeatures)
# 1.3 change list to big matrix
#humanfeatures.mat <- do.call(rbind, humanfeatures)
#GPTfeatures.mat <- do.call(rbind, GPTfeatures)
#mat<-rbind(humanfeatures.mat,GPTfeatures.mat)
#features <- list(humanfeatures.mat, GPTfeatures.mat)
##ALL
x<-NULL
for (i in 1:length(features)){
x<-rbind(x,apply(features[[i]],2,sum))
}
for (i in 1:nrow(x)){
x[i,]<-x[i,]/sum(x[i,])
}
for(j in i:ncol(x)){
x[,j]<-(x[,j]-mean(x[,j]))/sd(x[,j])
}
d<-dist(x)
pts<-cmdscale(d)
#plot(pts,type='n')
#title(main="Multidimensional Scaling Plot For All Authors")
#text(pts[,1],pts[,2],cex=0.8)
# 分组索引
group <- c(rep("blue", 110), rep("red", 110))  # 前 110 个为蓝色，后 110 个为红色
# 绘图
plot(pts[, 1], pts[, 2], type = "n",  # 初始化空图
xlab = "pts[,1]", ylab = "pts[,2]",
main = "Multidimensional Scaling Plot of All Essays Based on Topic")
# 添加前 110 个点（蓝色）
points(pts[1:110, 1], pts[1:110, 2], col = "blue", pch = 19)
# 添加后 110 个点（红色）
points(pts[111:220, 1], pts[111:220, 2], col = "red", pch = 19)
# 添加文本标签（蓝色和红色分开）
#text(pts[1:110, 1], pts[1:110, 2], labels = 1:110, col = "blue", cex = 0.8)
#text(pts[111:220, 1], pts[111:220, 2], labels = 111:220, col = "red", cex = 0.8)
legend("topright",               # 图例位置，可调整为 "topleft", "bottomright" 等
legend = c("Human", "ChatGPT"),  # 图例内容
col = c("blue", "red"),   # 图例中点的颜色
pch = 19,                 # 图例中点的形状
cex = 0.8)
labs(title = "Model Accuracy Comparison Boxplot") +
theme_bw() +
theme(
text = element_text(size = 14),  # Set global font size
axis.title = element_text(size = 16),  # Adjust axis title font size
axis.text = element_text(size = 12),  # Adjust axis tick labels font size
legend.title = element_text(size = 14),  # Adjust legend title font size
legend.text = element_text(size = 12),  # Adjust legend text font size
plot.title = element_text(size = 18)  # Adjust plot title font size
)
# 加载 ggplot2
library(ggplot2)
# 创建数据框
# 假设 pts 是一个 220 行 2 列的矩阵
data <- data.frame(
x = pts[, 1],                     # x 坐标
y = pts[, 2],                     # y 坐标
group = rep(c("Human", "ChatGPT"), each = 110)  # 更改分组名称
)
# 绘图
ggplot(data, aes(x = x, y = y, color = group)) +  # 按分组设置颜色
geom_point(size = 3) +                         # 绘制点，调整点大小
labs(
x = "Dimension 1",                                       # x轴标签
y = "Dimension 2",                                       # y轴标签
color = "Author"                                         # 图例标题
) +
labs(title = "Multidimensional Scaling Plot of All Essays Based on Topic") +
theme_bw() +
theme(
text = element_text(size = 14),  # Set global font size
axis.title = element_text(size = 16),  # Adjust axis title font size
axis.text = element_text(size = 12),  # Adjust axis tick labels font size
legend.title = element_text(size = 14),  # Adjust legend title font size
legend.text = element_text(size = 12),  # Adjust legend text font size
plot.title = element_text(size = 18)  # Adjust plot title font size
)+
scale_color_brewer(palette = "Set2") # 使用简洁主题
# 绘图
ggplot(data, aes(x = x, y = y, color = group)) +  # 按分组设置颜色
geom_point(size = 3) +                         # 绘制点，调整点大小
labs(
x = "Dimension 1",                                       # x轴标签
y = "Dimension 2",                                       # y轴标签
color = "Author"                                         # 图例标题
) +
labs() +
theme_bw() +
theme(
text = element_text(size = 14),  # Set global font size
axis.title = element_text(size = 16),  # Adjust axis title font size
axis.text = element_text(size = 12),  # Adjust axis tick labels font size
legend.title = element_text(size = 14),  # Adjust legend title font size
legend.text = element_text(size = 12),  # Adjust legend text font size
plot.title = element_text(size = 18)  # Adjust plot title font size
)+
scale_color_brewer(palette = "Set2") # 使用简洁主题
# 绘图
p = ggplot(data, aes(x = x, y = y, color = group)) +  # 按分组设置颜色
geom_point(size = 3) +                         # 绘制点，调整点大小
labs(
x = "Dimension 1",                                       # x轴标签
y = "Dimension 2",                                       # y轴标签
color = "Author"                                         # 图例标题
) +
labs() +
theme_bw() +
theme(
text = element_text(size = 14),  # Set global font size
axis.title = element_text(size = 16),  # Adjust axis title font size
axis.text = element_text(size = 12),  # Adjust axis tick labels font size
legend.title = element_text(size = 14),  # Adjust legend title font size
legend.text = element_text(size = 12),  # Adjust legend text font size
plot.title = element_text(size = 18)  # Adjust plot title font size
)+
scale_color_brewer(palette = "Set2") # 使用简洁主题
ggsave("./SEM1/Project2/Figures/MDSplot.pdf", plot = p, width = 8, height = 6)
?qn
?qnorm
lb <- qnorm(0.025)
lb
ub <- qnorm(0.975)
n <- 50
xbar <- 2.4
lb <- (sqrt(3/n) * lb + 3) /xbar
ub <- (sqrt(3/n) * ub + 3) /xbar
lb <- qnorm(0.005)
ub <- qnorm(0.995)
n <- 50
xbar <- 2.4
lb <- (sqrt(3/n) * lb + 3) /xbar
ub <- (sqrt(3/n) * ub + 3) /xbar
qpois(0.025, 6)
qpois(0.025, 6)
qpois(0.035, 6)
qpois(1, 6)
qpois(0, 6)
qpois(0.025, 6)
ppois(2, 6)
dpois(2, 6)
?ppois
ppois(3, 6)
ppois(2, 6)
ppois(1, 6)
qpois(0.975, 6)
rpois(1, 6)
rpois(1, 6)
rpois(1, 6)
rpois(1, 6)
rpois(1, 6)
qpois(0, 6)
ppois(11, 6)
1 - ppois(11, 6)
