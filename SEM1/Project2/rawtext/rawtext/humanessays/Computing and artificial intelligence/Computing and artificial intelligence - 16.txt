When I was 14, I spent a huge amount of time on the internet, but not the internet we know today. It was 1994, so while the world wide web existed, it wasn’t generally accessible. Prodigy and CompuServe were popular, and AOL was on the rise, but I didn’t have access to the web, and no one I knew had access to the web. Every connection to this ancient internet began with the wail and screech of a modem. It was a new world that still needed metaphors: an information superhighway characterised by cryptic commands and strange subcultures. It was a realm apart. My primary on-ramp to this internet was Gopher, a branching system of menus that I reached through a dial-up connection to a distant library. Gopher’s internet offered no URLs – no way to say take me here. Instead, a resource’s address was, practically speaking, the sequence of menu items you chose to reach it. Like a path through a labyrinth: first item, third item, fifth, the one that says ‘CaseWesternReserveUniversity’, the one that says ‘MicroMUSE’. This is important: I stumbled into it. Gopher could surprise you; any menu item might be a pass through the mountains that opened on to a broad vista you’d never seen before. There were no search engines yet; these menus were all assembled by humans. It was a sort of proto-web, where curation and navigation were basically the same thing. I would wander through the menus with a pencil and paper next to the keyboard, transcribing my steps so I could retrace them later if I found something good. When I found the menu item for MicroMUSE, it alluded to a science-fictional scenario – a space station – and that was enough to pique my interest. So, one day in 1994, using a Mac Plus in the basement of my childhood home, I gave it a shot. Gopher blinked and yielded to a telnet connection, and my destination announced itself in tall ASCII-art letters: ‘MicroMUSE: Idling is foof.’ In the beginning, there was the command line, and not long after the command line, there were text adventures, games such as Colossal Cave Adventure and Zork. In these games, you would type look to read the description of the space around you, then open mailbox, then read leaflet and so on. I had acquired the Mac editions of several of these games and struggled through them. My favorite was the text-adventure adaptation of Douglas Adams’s The Hitchhiker’s Guide to the Galaxy. In that one, you had to type things such as lie down in front of bulldozer and put fish in ear. On the heels of text adventures came Multi-User Dungeons, or MUDs. Unlike the text adventures that preceded them, MUDs were social. You could walk into a room inhabited by other players, type say ‘Hi everybody’ and receive a chorus of greetings in return. When MUDs appeared, that was an entirely novel experience, and often an addictive one. Long before Twitter or Snapchat, MUDs inspired the moral panic of the moment: a 1993 Wired article titled ‘The Dragon Ate My Homework’ described university students losing themselves in these virtual worlds. Keep in mind: they were just words on a screen. By the time I got online, MUDs were on the decline, but the form had continued to evolve. The ‘MUSE’ in MicroMUSE stood for Multi-User Shared Environment; the dungeon had been stripped away, replaced by a more abstract imaginative space. The fiction of the space station was lightly held. In truth, MicroMUSE was more like a holodeck, a blank slate for all kinds of scenarios. Exploring the system was like paging through a giant compendium of fan fiction. Turn left to explore Yellowstone; turn right to visit Narnia; go straight ahead to enter Willy Wonka’s Chocolate Factory. Each environment was just chunks of text linked together by navigation: go west, climb ladder, open hatch. If you’d looked over my shoulder as I was exploring MicroMUSE, you might have assumed I was reading a herky-jerky e-book. the atmosphere was one of extreme politeness and earnest curiosity: Sesame Street in low-earth orbit The system had experienced a whole tumultuous history before I found it, but by 1994, it ran on a server in MIT’s AI lab and its aims were unapologetically educational. Its charter described a ‘virtual community with preference toward educational content of a scientific and cultural nature’ and the atmosphere was one of extreme politeness and earnest curiosity: Sesame Street in low-earth orbit. Even to an extremely polite and earnestly curious 14-year-old, it seemed a bit saccharine, but that didn’t matter, because the environment’s official aims faded into the background the moment you began to build. On the old MUDs, the creation of new material was largely limited to system administrators, who were often referred to as wizards or even gods. (You can see why this was such an appealing space for a certain kind of person.) On MicroMUSE, anyone could create, and they could create anything: an object, a room, a house, a chocolate factory. All of this was accomplished using the system’s built-in scripting language, which operated at about the level of Excel macros. It was rudimentary, but rudimentary was just fine for a young teen still new to code. The MUSE was, I think, a premonition of Minecraft, with the same sense of open-ended possibility that speaks so powerfully to 14-year-olds today. There was nothing you could imagine that you couldn’t build. ‘A long hall, illuminated by rows of bright torches, with a great throne at one end’ – simple as that. When you bracketed those words with a few simple commands – to create the room, specify its description, link it to other rooms – you had your hall. It was just text, but everything was just text. It was intoxicating. On MicroMUSE, my handle was Nib Noals. (Reverse ‘Robin’ and ‘Sloan’, drop a few letters, get it?) After I had spent some time exploring the existing space station/holodeck, I set out to build a home of my own, a hideout that I called Nib’s Knoll. I created a hill and a mammoth oak tree, and inside the tree I carved out a house. There was a library, lovingly described – you could examine the shelves and see the titles of individual books. There was a lookout post set high in the branches. There was a secret passage. There was a small dragon programmed to follow me from room to room. I obsessed over this place. Almost daily, I would connect to MicroMUSE and rewrite the rooms’ descriptions or rearrange them entirely. This wasn’t entirely solipsistic: there were always other users around. Nib’s Knoll had a guestbook, and if you typed the command to inspect it, you would see ‘a thick tome on a low table, with a quill pen and a pot of ink’ and then an invitation to scribble a greeting. I would often log in to discover that another user had visited in my absence, explored my house, and left a message behind. It was spooky and thrilling. When users I recognised were online, I would invite them to visit, an act that prompted all the nervousness and last-minute clean-up of real-world entertaining. Soon, I had an accomplice. His handle was Hacker VII, and I don’t remember how we met, though I suppose we must have just stumbled into one another on some virtual boulevard, because there wasn’t really any other way to meet in MicroMUSE. What I do remember is laughing so hard my stomach hurt. There was no AOL Instant Messenger then, no Gchat, nothing like that. If you try to remember the first time you used a chat interface, I suspect you’ll unearth some of the same brain-tingling delight. Conversations in MicroMUSE, as in any chat interface, were fast-paced enough to keep you engaged, but they also provided enough lag – a thick enough buffer – for you to be your cleverest self. Hacker VII became not only a key source of hilarity but also my primary collaborator. Both of us sought to delve deeper into the scripting language that brought things to life in the MUSE. I had already created rooms with elaborate descriptions, and I had created objects with simple behaviours. But together, Hacker VII and I dreamed of more spectacular effects. The aim of our work was the aim of all projects in MicroMUSE, and really, the aim of most projects on that early internet: we wanted to show off. So we built a giant transforming robot. Of course, the robot’s size wasn’t impressive, as it was only a matter of an adjective. The transformation, though: that took some doing. We imagined a gleaming titan assembled from two smaller units. Mine would be the Electron Crusader; Hacker VII’s, the Proton Defender. Together, they would combine to form the Atomic Champion. You can tell we had watched a lot of Voltron. That’s what we imagined, but we couldn’t actually make it work. This is where MicroMUSE betrayed its Unix underpinnings. Every object had an owner and a set of permissions associated with it; this was a good thing insofar as it meant that a roaming cyber-vandal couldn’t corrupt the lovingly crafted chambers of Nib’s Knoll. But it also meant that I couldn’t manipulate Hacker VII’s robot, nor he mine. Each of us could control only half of the transformation, so it required that we each execute a command simultaneously, which seemed inelegant, and besides, what if one of us was offline when the Atomic Champion was needed for show-off purposes? After a long struggle, we hit upon a solution: the robots would negotiate between themselves. Using the system’s whisper command, one robot could suggest, ‘Psst. Let’s transform.’ The other would obey, and both would vanish from view while the Atomic Champion emerged from its hiding place. It was a magic trick – perhaps more properly, a hack – that produced the illusion of these two robots folding together to make something larger, a process described with a level of detail only available to dedicated viewers of robot-centric cartoons. MicroMUSE’s message announcing the conclusion of the process was low-key and yet somehow also totally epic: ‘The Atomic Champion has entered the room.’ It was, for me, an early instance of a now-familiar feeling: the surging triumph of solving a problem on a computer screen. In this respect, MicroMUSE was an essential training ground. The scripting language was rudimentary, but it had all the basics, and more importantly, there was a compelling reason to learn. If you made something cool or beautiful or both, there was an audience to impress. My collaboration with Hacker VII proved to be fortuitous, and not just for reasons of robot fabrication. As it turned out, he was accessing MicroMUSE not through a circuitous sequence of Gopher menus but directly from a Unix shell – a naked command prompt. From that prompt, he could telnet anywhere whereas I was limited to the scattering of destinations listed in my menus. His computer club had somehow wrangled an allocation of Unix accounts from a generous (and possibly delinquent) system administrator at the TACOM (Tank-automotive and Armaments Command) army base in Warren, Michigan. He gave one of those accounts to me, and so it came to pass that my first email address boasted a ‘.mil’ domain. All in all, I spent a couple of years there on the holodeck, building things with Hacker VII. But of course, the world was changing. There were better ways to get online and there were new spaces to explore. I downloaded a program called Mosaic and finally found my way into the web. I was in high school, and the triumphs available on MicroMUSE started to seem somewhat less vivid. I did homework; played an instrument; painted sets for the school musical; kissed a girl. Every so often, I would find my way back to MicroMUSE, but my visits grew shorter and there seemed to be fewer users around each time. Then AOL Instant Messenger arrived and my entire high school downloaded it at once and we all stayed up late chatting. The social internet had become a reflection of the real world. It was no longer a realm apart. I went to college. Many years later, I thought of MicroMUSE, and discovered that it was still up and running. Indeed, you can log in today, right now – the space station still spins. The streets are empty. It’s half glitchy video game, half haunted house If you explore MicroMUSE today, you’ll get a preview of the fate that awaits all of our social systems. The streets are empty, but it’s more than that: there is a palpable sense of entropy. You can query the system for a list of commands, but many of them no longer work. It’s half glitchy video game, half haunted house. Sometimes it falls offline entirely, only to return days later. The system still speaks. You are welcomed by the transporter attendant, who gives directions to all newcomers to this space city. It cautions you: Clear communication is very important in a text-based environment… When I logged in again after many years away – connected directly, no Gopher required, using the Terminal program on my MacBook, sleek descendant of that old Mac Plus – the first thing I did was look for Nib’s Knoll. In truth, I wasn’t sure where to begin. I had long forgotten the path through the holodeck. There were ways to teleport but, to teleport, you need to know where you’re going, and MicroMUSE wouldn’t, or couldn’t, reveal the location of my old home. It is very likely that it no longer exists, swept away in a database purge sometime during the past 15 years. I mean, really very likely. Ninety-five percent likely. And yet, the ghostliness of present-day MicroMUSE – the inability of the system to deliver a definitive yea or nay – leaves space for a dim hope. I wander the empty streets, and I see familiar places: structures and descriptions I remember from the mid-1990s. I remember the things I built with Hacker VII, and the feeling that followed when they actually worked. I remember the scrum of users; there would be five or six of us gathered in a room, and it would seem like a crowd, a veritable riot of life. Hacker VII’s real name was Joe VanDeventer, and today Joe is a web developer in Chicago. Nib Noals’s real name was Robin Sloan, and today I am a writer in San Francisco. Both of these paths were prefigured almost perfectly on MicroMUSE. All we did there – all we could do – was program and write. Build and describe. Every additional feature called for more words: words to tell a user what he or she was doing, words to show everyone else. It was a whole world made of words. It was the web before the web; it was a novel that could stand up and speak. I don’t mean to mythologise a crusty old system; its innocence and simplicity were handicaps as much as they were virtues. But even so, I’m grateful that MicroMUSE, of all places, was my training ground. Social systems have values – arguments baked into their design. For example, Twitter’s core argument seems to be: everything should be public, and messages should find the largest audience possible. Snapchat’s might be: communication should be private and ephemeral. The video game Counter-Strike’s is almost certainly: aim for the head. Back in 1994, MicroMUSE’s core argument was: language is all you need. If you can write, it can be real. I left the holodeck, but I never abandoned that notion. It is, frankly, miraculous that MicroMUSE still runs at all. It’s not hosted by MIT anymore; the system has migrated to a server called MuseNet. If you can get yourself to a command prompt, you can type ‘telnet micromuse.musenet.org 4201’ and walk the empty streets yourself. If you do, I have an offer to make. I need to be very clear: this is quixotic in the extreme. There is every reason to believe that Nib’s Knoll was deleted long ago. But, if it exists and if it is reachable by some path through that haunted space station, I offer a standing bounty of $1,000 to anyone who can find it and take me there. 